#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# exit when any command fails

ErrorHandler () {
    errcode=$? # save the exit code as the first thing done in the trap function
    echo "error $errorcode"
    echo "the command executing at the time of the error was \"$BASH_COMMAND\""
    echo "on line ${BASH_LINENO[0]}"
    # do some error handling, cleanup, logging, notification
    # $BASH_COMMAND contains the command that was being executed at the time of the trap
    # ${BASH_LINENO[0]} contains the line number in the script of that command
    # exit the script or return to try again, etc.
    exit $errcode  # or use some other value or do return instead
}
trap ErrorHandler ERR

cd $DIR/..

# npx branch-ts-cli build
echo "build"
npx webpack-cli build
rm ./serve/main.css
cp ./src/style/main.css ./serve/main.css -rf
rm ./serve/manifest.json
cp ./src/manifest.json ./serve/manifest.json -rf
rm ./serve/pdf.worker.js
cp ./src/script/pdf/pdf.worker.js ./serve/pdf.worker.js -rf
rm ./serve/popup.html
cp ./src/popup.html ./serve/popup.html -rf

rm ./serve/resource -rf
cp ./src/resource ./serve/resource -rf
rm ./install -rf >/dev/null 2>&1
cp ./serve ./install -rf